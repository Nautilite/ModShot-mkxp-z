name: Build

on:
  push:
    branches:
    - dev
    paths:
    - '.github/workflows/autobuild.yml'
    - 'src/**'
    - 'binding/**'
    - 'shader/**'
    - 'assets/**'
    - 'windows/**'
    - 'linux/**'
    - 'macos/**'
    - 'meson.build'
    - 'meson_options.txt'

  pull_request:
    branches:
    - dev
    paths:
    - '.github/workflows/autobuild.yml'
    - 'src/**'
    - 'binding/**'
    - 'shader/**'
    - 'assets/**'
    - 'windows/**'
    - 'linux/**'
    - 'macos/**'
    - 'meson.build'
    - 'meson_options.txt'

  workflow_dispatch:

jobs:
  build-windows:
    name: Windows (${{ matrix.sys }})
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        include:
        - { sys: mingw32, env: i686, ruby-prefix: msvcrt }
        - { sys: mingw64, env: x86_64, ruby-prefix: x64-msvcrt }
        - { sys: ucrt64, env: ucrt-x86_64, ruby-prefix: x64-ucrt }

    steps:
      - name: Shorten commit SHA
        id: shorten-sha
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2 (${{ matrix.sys }})
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.sys }}
          install: >-
            base-devel
            git
            ruby
            vim
            mingw-w64-${{ matrix.env }}-autotools
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-gcc
            mingw-w64-${{ matrix.env }}-meson

      - name: Dependencies cache
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: windows/build-${{ matrix.sys }}
          key: windows-${{ matrix.sys }}-${{ hashFiles('windows/Makefile') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        shell: msys2 {0}
        working-directory: ${{ github.workspace }}/windows
        run: make LTO=0

      - name: Build mkxp-z
        shell: msys2 {0}
        run: |
          source windows/vars.sh
          meson setup build --prefix="$GITHUB_WORKSPACE/build/artifact"
          meson compile -Cbuild
          meson install -Cbuild

      - name: Prepare artifact
        shell: msys2 {0}
        working-directory: ${{ github.workspace }}/build/artifact
        run: |
          strip -S -x ./mkxp-z.exe
          strip -S -x ./${{ matrix.ruby-prefix }}-ruby310.dll
          cp -v ../../assets/LICENSE.mkxp-z-with-https.txt .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: mkxp-z_Windows_${{ matrix.sys }}_${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}_${{ steps.shorten-sha.outputs.sha }}
          path: build/artifact

  build-ubuntu-20:
    name: Ubuntu 20.04
    runs-on: ubuntu-20.04

    steps:
      - name: Shorten commit SHA
        id: shorten-sha
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y wget git vim ruby patchelf python3 python3-pip build-essential autoconf automake libtool pkg-config cmake bison libgl1-mesa-dev xorg-dev libxext-dev libasound2-dev libpulse-dev
          sudo python3 -m pip install meson ninja

      - name: Install Autoconf 2.71
        working-directory: ${{ runner.temp }}
        run: |
          wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.xz
          tar -xf autoconf-2.71.tar.xz
          cd autoconf-2.71
          ./configure
          make -j2
          sudo make install

      - name: Dependencies cache
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: linux/build-x86_64
          key: linux-x86_64-${{ hashFiles('linux/Makefile') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/linux
        run: make LTO=0

      - name: Build mkxp-z
        run: |
          source linux/vars.sh
          meson build --prefix="$GITHUB_WORKSPACE/build/artifact"
          meson compile -Cbuild
          meson install -Cbuild

      - name: Prepare artifact
        working-directory: ${{ github.workspace }}/build/artifact
        run: |
          strip -S -x ./mkxp-z
          strip -S -x ./lib64/libruby.so.3.1
          cp -v ../../assets/LICENSE.mkxp-z-with-https.txt .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: mkxp-z_Ubuntu_20.04_${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}_${{ steps.shorten-sha.outputs.sha }}
          path: build/artifact

  build-macos:
    name: macOS
    runs-on: macos-latest

    steps:
      - name: Shorten commit SHA
        id: shorten-sha
        uses: benjlevesque/short-sha@v2.2
        with:
          length: 7

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove pre-existing Homebrew packages
        run: brew remove --force $(brew list)

      - name: Install Homebrew tools
        working-directory: ${{ github.workspace }}/macos/dependencies
        run: brew bundle

      - name: Dependencies cache
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            macos/dependencies/build-x86_64
            macos/dependencies/build-arm64
            macos/dependencies/build-universal
          key: macos-${{ hashFiles('macos/Dependencies/*.make', 'macos/Dependencies/*.sh') }}

      - name: Build dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/macos/dependencies
        run: ./setup.sh

      - name: Build mkxp-z
        working-directory: ${{ github.workspace }}/macos
        run: xcodebuild -project mkxp-z.xcodeproj -configuration "Release" -scheme "Universal" -derivedDataPath "$GITHUB_WORKSPACE/build"

      - name: Prepare artifact
        working-directory: ${{ github.workspace }}/build/Build/Products/Release
        run: |
          cp -v ../../../../assets/LICENSE.mkxp-z-with-https.txt Universal/
          ditto -Vkc --sequesterRsrc Universal mkxp-z.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: mkxp-z_macOS_${{ github.event_name == 'pull_request' && format('PR{0}', github.event.number) || github.ref_name }}_${{ steps.shorten-sha.outputs.sha }}
          path: build/Build/Products/Release/mkxp-z.zip
